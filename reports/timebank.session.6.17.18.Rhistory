sort(table(instanceEventData[instanceEventData$class=="REPORTING",]$word_form))
sort(table(instanceEventData[instanceEventData$class=="PERCEPTION",]$word_form))
sort(table(instanceEventData[instanceEventData$class=="REPORTING",]$word_form))
sort(table(instanceEventData[instanceEventData$class=="OCCURRENCE",]$word_form))
sort(table(EventData[EventData$class=="OCCURRENCE",]$word_form))
ls()
sort(table(eventData[eventData$class=="OCCURRENCE",]$word_form))
sort(table(eventData[eventData$class=="PERCEPTION",]$word_form))
sort(table(eventData[eventData$class=="REPORTING",]$word_form))
sort(table(eventData[eventData$class=="ASPECTUAL",]$word_form))
sort(table(eventData[eventData$class=="STATE",]$word_form))
sort(table(eventData[eventData$class=="STATE",]$word_form))
sort(table(eventData[eventData$class=="I_STATE",]$word_form))
sort(table(eventData[eventData$class=="STATE",]$word_form))
sort(table(eventData[eventData$class=="I_ASPECT",]$word_form))
sort(table(eventData[eventData$class=="I_ACTION",]$word_form))
sort(table(eventData[eventData$class=="ASPECTUAL",]$word_form))
sort(table(eventData[eventData$class=="REPORTING",]$word_form))
sort(table(eventData[eventData$class=="OCCURRENCE",]$word_form))
sort(table(eventData[eventData$class=="OCCURRENCE",]$word_form))
summary(eventData)
summary(eventData)
sort(table(eventData[eventData$class=="STATE",]$word_form))
sort(table(eventData[eventData$class=="STATE",]$word_form))
ls()
summary(instanceEventData)
instanceEventData[instanceEventData$pos=="OTHER",]
instanceEventData[instanceEventData$pos=="OTHER" && instanceEventData$class=="OCCURRENCE",]
instanceEventData[instanceEventData$pos=="OTHER" && instanceEventData$class=="OCCURRENCES",]
instanceEventData[instanceEventData$pos=="OTHER" & instanceEventData$class=="OCCURRENCE",]
printSentenceCite(eiidToXMLsent("d117e246",docs)
)
library(XML)
library(plyr) # for rbind.fill
library(tigerstats) # for ?
printSentenceCite(eiidToXMLsent("d117e246",docs))
source('main.R')
eidSentenceXML("d47e419",docs)
a
a = "pos"
b = "VERB"
c = "class"
d = "I_STATE"
verbIState = instanceSubframe(a,b,c,d)
sampleFrame(verbIState,25)
eidSentence("d13e54",docs)
eidSentenceXML("d13e54",docs)
b
b = "NOUN"
nounIState = instanceSubframe(a,b,c,d)
sampleFrame(nounIState,25)
eidSentence("d157e9",docs)
printSentence = function(sentence){
# spaceOut(sentence)
sent = gsub(" +"," ",gsub("\\n"," ",xmlValue(sentence)))
possFix = gsub("(\\w) 's ","\\1's ",sent)
negContract = gsub("(\\w) n't","\\1n't",possFix)
quoteFix = gsub("`` (\\w)","``\\1",negContract)
quoteFix = gsub(' "(\\w)',' ``\\1',quoteFix)
quoteFix = gsub('(\\w)" ',"\\1''",quoteFix)
leadSpace = gsub("^ ","",quoteFix)
noPerc = gsub("%","\\\\%",leadSpace)
noDollar = gsub("\\$","\\\\$",noPerc)
commaFix = gsub(" (,|\\.)","\\1",noDollar)
return(commaFix)
}
eidSentence("d157e9",docs)
# output: English sentence, xml removed
printSentence = function(sentence){
# spaceOut(sentence)
sent = gsub(" +"," ",gsub("\\n"," ",xmlValue(sentence)))
possFix = gsub("(\\w) 's ","\\1's ",sent)
negContract = gsub("(\\w) n't","\\1n't",possFix)
quoteFix = gsub("`` (\\w)","``\\1",negContract)
quoteFix = gsub(' "(\\w)',' ``\\1',quoteFix)
quoteFix = gsub('(\\S)" ',"\\1''",quoteFix)
leadSpace = gsub("^ ","",quoteFix)
noPerc = gsub("%","\\\\%",leadSpace)
noDollar = gsub("\\$","\\\\$",noPerc)
commaFix = gsub(" (,|\\.)","\\1",noDollar)
return(commaFix)
}
eidSentence("d157e9",docs)
eidSentenceXML("d157e9",docs)
eidSentence("d10e157",docs)
eidSentenceXML("d10e157",docs)
d
d = "I_ACTION"
nounIAction = instanceSubframe(a,b,c,d)
sampleFrame(nounIAction,25)
eidSentence("d24e47",docs)
eidSentenceXML("d24e47",docs)
test = xml(eidSentenceXML("d24e47",docs))
xml(eidSentenceXML("d24e47",docs))
eidSentenceXML("d24e47",docs)
toString(eidSentenceXML("d24e47",docs))
class(eidSentenceXML("d24e47",docs))
xmlValue(eidSentenceXML("d24e47",docs))
xmlTreeParse(eidSentenceXML("d24e47",docs))
xmlElementSummary(eidSentenceXML("d24e47",docs))
str(eidSentenceXML("d24e47",docs))
eidSentenceXML("d145e130",docs)
eidSentence("d145e130",docs)
printSentence = function(sentence){
spaceOut(sentence)
sent = gsub(" +"," ",gsub("\\n"," ",xmlValue(sentence)))
possFix = gsub("(\\w) 's ","\\1's ",sent)
negContract = gsub("(\\w) n't","\\1n't",possFix)
quoteFix = gsub("`` (\\w)","``\\1",negContract)
quoteFix = gsub(' "(\\w)',' ``\\1',quoteFix)
quoteFix = gsub('(\\S)" ',"\\1''",quoteFix)
leadSpace = gsub("^ ","",quoteFix)
noPerc = gsub("%","\\\\%",leadSpace)
noDollar = gsub("\\$","\\\\$",noPerc)
commaFix = gsub(" (,|\\.)","\\1",noDollar)
return(commaFix)
}
eidSentence("d145e130",docs)
eidSentence("d115e58",docs)
eidSentenceXML("d115e58",docs)
b
b = 'VERB'
verbIAction = instanceSubframe(a,b,c,d)
sampleFrame(verbIAction,25)
eidSentence("d102e19",docs)
eidSentenceXML("d102e19",docs)
eidSentenceXML("d44e28",docs)
eidSentence("d44e28",docs)
eidSentence("d31e25",docs)
eidSentenceXML("d31e25",docs)
valueSearch("d12e6",docs)
valueSearch("d12e1998",docs)
valueSearch("d12e1999",docs)
d171e13
valueSearch("d171e13",docs)
valueSearch("d171e26",docs)
valueSearch("d171e27",docs)
valueSearch("d3e97",docs)
eidSentence("d3e97",docs)
eidSentenceXML("d3e97",docs)
valueSearch("d3e97",docs)
valueSearch("d48e227",docs)
valueSearch("d169e50",docs)
valueSearch("d70e31",docs)
valueSearch("d169e201",docs)
valueSearch("d70e67",docs)
valueSearch("d5e198",docs)
valueSearch("d18e116",docs)
valueSearch("d29e79",docs)
valueSearch("d29e58",docs)
valueSearch("d29e59",docs)
valueSearch("d29e16",docs)
valueSearch("d40e32",docs)
valueSearch("d40e35",docs)
valueSearch("d40e16",docs)
valueSearch("d40e36",docs)
valueSearch("d40e37",docs)
valueSearch("d9e1",docs)
eidSentence("d40e32",docs)
eidSentenceXML("d40e32",docs)
valueSearch("d28e104",docs)
valueSearch("d5e159",docs)
valueSearch("d5e941",docs)
valueSearch("d119e254",docs)
valueSearch("d120e300",docs)
valueSearch("d120e245",docs)
valueSearch("d120e1355",docs)
valueSearch("d60e28",docs)
valueSearch("d47e251",docs)
valueSearch("d47e252",docs)
valueSearch("d88e57",docs)
valueSearch("d169e95",docs)
valueSearch("d6e229",docs)
valueSearch("d47e419",docs)
valueSearch("d13e54",docs)
valueSearch("d157e9",docs)
valueSearch("d10e157",docs)
valueSearch("d24e47",docs)
valueSearch("d145e129",docs)
valueSearch("d145e130",docs)
valueSearch("d115e58",docs)
valueSearch("d102e14",docs)
valueSearch("d102e17",docs)
valueSearch("d102e19",docs)
valueSearch("d44e28",docs)
valueSearch("d31e25",docs)
xtabs(~ tense + aspect, data=instanceEventData)
xtabs(~ class + tense, data=instanceEventData)
xtabs(~ aspect + class, data=instanceEventData)
xtabs(~ class + aspect, data=instanceEventData)
xtabs(~ tense + pos, data=instanceEventData)
xtabs(~ tense + aspect + class, data=instanceEventData)
xtabs(~ class + tense + aspect, data=instanceEventData)
xtabs(~ tense + class + aspect, data=instanceEventData)
xtabs(~ tense + class, data=instanceEventData)
summary(timeData)
xtabs(~ aspect + pos, data=instanceEventData)
xtabs(~ aspect + tense, data=instanceEventData)
xtabs(~ tense, data=instanceEventData)
a="tense"
c="aspect"
b="NONE"
d="PROGRESSIVE"
notenseProg = instanceSubframe(a,b,c,d)
nrow(notenseProg)
notenseProg
valueSearch("d146e79",docs)
eidSentence("d146e79",docs)
b="INFINITIVE"
d="PERFECTIVE"
infPerf = instanceSubframe(a,b,c,d)
infPerf
eidSentence("d121e1052",docs)
xtabs(~ tense, data=instanceEventData)
xtabs(~ aspect + tense, data=instanceEventData)
xtabs(~ tense + aspect, data=instanceEventData)
xtabs(~ aspect, data=instanceEventData)
xtabs(~ class, data=instanceEventData)
a
b
c
b = "PRESPART"
d
presPartPerf = instanceSubframe(a,b,c,d)
presPartPerf
valueSearch("d47e336",docs)
eidSentence("d47e336",docs)
eidSentenceXML("d47e336",docs)
b = "PASTPART"
pastPartPerf = instanceSubframe(a,b,c,d)
pastPartPerf
valueSearch("d114e162",docs)
eidSentence("d114e162",docs)
eidSentenceXML("d114e162",docs)
valueSearch("d117e27",docs)
eidSentence("d117e27",docs)
eidSentenceXML("d117e27",docs)
b
b = "INFINITIVE"
infinitivePerfective = instanceSubframe(a,b,c,d)
infinitivePerfective
eidSentence("d121e1052",docs)
valueSearch("d121e1052",docs)
eidSentenceXML("d121e1052",docs)
b
b = 'PAST'
d = "PERFECTIVE_PROGRESSIVE"
pastPerfProg = instanceSubframe(a,b,c,d)
pastPerfProg
eidSentence("d121e140")
eidSentence("d121e140",docs)
eidSentenceXML("d121e140",docs)
valueSearch("d121e140",docs)
b = 'PRESENT'
presPerfProg = instanceSubframe(a,b,c,d)
presPerfProg
eidSentence("d10e53",docs)
eidSentenceXML("d10e53",docs)
valueSearch("d10e53",docs)
eidSentence("d146e70",docs)
eidSentenceXML("d146e70",docs)
valueSearch("d146e70",docs)
eidSentence("d16e7",docs)
eidSentenceXML("d16e7",docs)
valueSearch("d16e7",docs)
b
b = 'FUTURE'
d
d = 
'PERFECTIVE'
futurePerfective = instanceSubframe(a,b,c,d)
futurePerfective
eidSentence("d165e15",docs)
eidSentenceXML("d165e15",docs)
valueSearch("d165e15",docs)
eidSentence("d165e15",docs)
eidSentenceXML("d165e15",docs)
valueSearch("d165e15",docs)
eidSentence("d128e9",docs)
eidSentenceXML("d128e9",docs)
valueSearch("d128e9",docs)
valueSearch("d48e346",docs)
eidSentence("d48e346",docs)
eidSentenceXML("d48e346",docs)
eidSentence("d5e211",docs)
eidSentenceXML("d5e211",docs)
valueSearch("d5e211",docs)
xtabs(~ tense + aspect + class,data=instanceEventData)
xtabs(~ tense + aspect + pos,data=instanceEventData)
xtabs(~ tense + pos +  aspect,data=instanceEventData)
xtabs(~ pos,data=instanceEventData)
xtabs(~ tense+aspect,data=instanceEvenntData)
nrow(instanceEventData)
nrow(instanceEventData)
xtabs(~ polarity + pos,data=instanceEventData)
xtabs(~ polarity + class,data=instanceEventData)
 
summary(instanceEventData)
instanceEventData[instanceEventData$cardinality!=NA,]
instanceEventData[instanceEventData$cardinality=='PLURAL',]
temp = instanceEventData[instanceEventData$cardinality=='PLURAL',]
nrow(temp)
nrow(instanceEventData)
summary(instanceEventData)
temp = instanceEventData[instanceEventData$cardinality=='EVERY',]
nrow(temp)
names(instanceEventData$cardinality)
summary(instanceEventData$cardinality)
temp = instanceEventData[instanceEventData$cardinality=='every',]
nrow(temp)
instanceEventData[complete.cases(instanceEventData),]
instanceEventData[complete.cases(instanceEventData[,8]),]
instanceEventData[complete.cases(instanceEventData[,8]),]$eventID
list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)
for(i in 1:length(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)){
for(i in 1:length(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID))){
eidsentence(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
valueSearch(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
eidsentenceXML(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
}
for(i in 1:length(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID))){
eidSentence(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
valueSearch(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
eidSentenceXML(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
}
eventReport = function(eventid,root){
print("")
print(eidSentence(eventid,root))
print("")
print(valueSearch(eventid,rood))
print("")
print(eidSentenceXML(eventid,root))
print("")
}
eventReport("d106e1",docs)
eventReport = function(eventid,root){
print("")
print(eidSentence(eventid,root))
print("")
print(valueSearch(eventid,root))
print("")
print(eidSentenceXML(eventid,root))
print("")
}
eventReport("d106e1",docs)
list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)
class(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID))
cardinalList = list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)
length(cardinalList)
cardinalList[[1]]
cardinalList[[1]][[1]]
cardinalList = instanceEventData[complete.cases(instanceEventData[,8]),]$eventID
length(cardinalList)
eventListReport = function(event_list,root){
for(i in 1:length(event_list)){
eventReport(event_list[[i]])
 }
}
sink('cardinal.report.xml')
eventListReport(cardinalList,docs)
eventListReport = function(event_list,root){
for(i in 1:length(event_list)){
eventReport(event_list[[i]],root)
 }
}
eventListReport(cardinalList,docs)
sink()
summary(instanceEventData)
xtabs(~ cardinality + pos, data=instanceEventData)
summary(signals)
summary(signalData)
names(signalData$word_form)
summary(signalData$word_form)
sort(list(summary(signalData$word_form)),descending=TRUE)
sort(list(summary(signalData$word_form)),decreasing=TRUE)
sort(summary(signalData$word_form),decreasing=TRUE)
summary(instanceEventData)
summary(instanceEventData$modality)
temp = instanceEventData[instanceEventData$modality=="'d",]
nrow(temp)
temp = instanceEventData[instanceEventData$modality=="\\'d",]
nrow(temp)
temp = instanceEventData[instanceEventData$modality=="'d",][complete.cases(instanceEventData[,7])]
temp = instanceEventData[instanceEventData$modality=="'d",][complete.cases(instanceEventData[,7]),]
nrow(temp)
temp = instanceEventData[complete.cases(instanceEventData[,7]),]
nrow(temp)
temp = instanceEventData[complete.cases(instanceEventData[,7]),][instanceEventData$modality=="'d",]
nrow(temp)
temp
nrow(temp)
temp = instanceEventData[complete.cases(instanceEventData[,7]),]
temp
eidSentence("d139e50",docs)
eidSentence("d1e21",docs)
summary(instanceEventData$modality)
eidSentence("d5e246",docs)
valueSearch("d5e246",docs)
valueSearch("d70e30",docs)
eidSentenceXML("d70e30",docs)
eidSentenceXML("d70e66",docs)
valueSearch("d70e66",docs)
eidSentence("d70e66",docs)
xtabs(~ cardinality + pos, data=instanceEventData)
xtabs(~ cardinality + pos, data=instanceEventData)
quit()
source('main.R')
length(untilLinks)
untillinkIDList = extractIDfromAll(untilLinks,"lid")
untillinkIDList
linkListHostCompReport(untillinkIDList,untilData)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,signalID == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(SIDtoSignal(uniqueLinkIDs[[i]], docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
untillinkIDList
summary(untilData)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,lid == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(SIDtoSignal(uniqueLinkIDs[[i]], docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,lid == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(LIDtoLink(uniqueLinkIDs[[i]], docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
LIDtoLink("d4l11",docs)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,lid == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(SIDtoSignal(foo$signalID, docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
source('link.report.R')
linkListHostCompReport(untillinkIDList,untilData)
head(untilData)
TIDtoTime("d4t36",docs)
ToSentence(TIDtoTime("d4t36",docs))
ToSentence(TIDtoTime("d106t122",docs))
ToSentence(TIDtoTime("d121t196",docs))
test = subset(untilData,is.na(timeID))
nrow(test)
nrow(untilData)
test2 = dplyr::setdiff(untilData,test)
test2
ToSentence(TIDtoTime("d68t27",docs))
printSentenceCite(ToSentence(TIDtoTime("d68t27",docs)))
printSentenceCite(ToSentence(TIDtoTime("d118t299",docs)))
printSentenceCite(ToSentence(TIDtoTime("d118t299",docs)))
summary(untilData)
untilData$word_form.t_host
untilData$word_form.t_comp
sinceData$word_form.t_comp
untilData
savehistory(file="timebank.session.6.17.18.Rhistory")

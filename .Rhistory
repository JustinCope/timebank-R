eidSentence("d165e15",docs)
eidSentenceXML("d165e15",docs)
valueSearch("d165e15",docs)
eidSentence("d128e9",docs)
eidSentenceXML("d128e9",docs)
valueSearch("d128e9",docs)
valueSearch("d48e346",docs)
eidSentence("d48e346",docs)
eidSentenceXML("d48e346",docs)
eidSentence("d5e211",docs)
eidSentenceXML("d5e211",docs)
valueSearch("d5e211",docs)
xtabs(~ tense + aspect + class,data=instanceEventData)
xtabs(~ tense + aspect + pos,data=instanceEventData)
xtabs(~ tense + pos +  aspect,data=instanceEventData)
xtabs(~ pos,data=instanceEventData)
xtabs(~ tense+aspect,data=instanceEvenntData)
nrow(instanceEventData)
nrow(instanceEventData)
xtabs(~ polarity + pos,data=instanceEventData)
xtabs(~ polarity + class,data=instanceEventData)
 
summary(instanceEventData)
instanceEventData[instanceEventData$cardinality!=NA,]
instanceEventData[instanceEventData$cardinality=='PLURAL',]
temp = instanceEventData[instanceEventData$cardinality=='PLURAL',]
nrow(temp)
nrow(instanceEventData)
summary(instanceEventData)
temp = instanceEventData[instanceEventData$cardinality=='EVERY',]
nrow(temp)
names(instanceEventData$cardinality)
summary(instanceEventData$cardinality)
temp = instanceEventData[instanceEventData$cardinality=='every',]
nrow(temp)
instanceEventData[complete.cases(instanceEventData),]
instanceEventData[complete.cases(instanceEventData[,8]),]
instanceEventData[complete.cases(instanceEventData[,8]),]$eventID
list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)
for(i in 1:length(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)){
for(i in 1:length(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID))){
eidsentence(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
valueSearch(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
eidsentenceXML(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
}
for(i in 1:length(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID))){
eidSentence(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
valueSearch(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
eidSentenceXML(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)[[i]],docs)
}
eventReport = function(eventid,root){
print("")
print(eidSentence(eventid,root))
print("")
print(valueSearch(eventid,rood))
print("")
print(eidSentenceXML(eventid,root))
print("")
}
eventReport("d106e1",docs)
eventReport = function(eventid,root){
print("")
print(eidSentence(eventid,root))
print("")
print(valueSearch(eventid,root))
print("")
print(eidSentenceXML(eventid,root))
print("")
}
eventReport("d106e1",docs)
list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)
class(list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID))
cardinalList = list(instanceEventData[complete.cases(instanceEventData[,8]),]$eventID)
length(cardinalList)
cardinalList[[1]]
cardinalList[[1]][[1]]
cardinalList = instanceEventData[complete.cases(instanceEventData[,8]),]$eventID
length(cardinalList)
eventListReport = function(event_list,root){
for(i in 1:length(event_list)){
eventReport(event_list[[i]])
 }
}
sink('cardinal.report.xml')
eventListReport(cardinalList,docs)
eventListReport = function(event_list,root){
for(i in 1:length(event_list)){
eventReport(event_list[[i]],root)
 }
}
eventListReport(cardinalList,docs)
sink()
summary(instanceEventData)
xtabs(~ cardinality + pos, data=instanceEventData)
summary(signals)
summary(signalData)
names(signalData$word_form)
summary(signalData$word_form)
sort(list(summary(signalData$word_form)),descending=TRUE)
sort(list(summary(signalData$word_form)),decreasing=TRUE)
sort(summary(signalData$word_form),decreasing=TRUE)
summary(instanceEventData)
summary(instanceEventData$modality)
temp = instanceEventData[instanceEventData$modality=="'d",]
nrow(temp)
temp = instanceEventData[instanceEventData$modality=="\\'d",]
nrow(temp)
temp = instanceEventData[instanceEventData$modality=="'d",][complete.cases(instanceEventData[,7])]
temp = instanceEventData[instanceEventData$modality=="'d",][complete.cases(instanceEventData[,7]),]
nrow(temp)
temp = instanceEventData[complete.cases(instanceEventData[,7]),]
nrow(temp)
temp = instanceEventData[complete.cases(instanceEventData[,7]),][instanceEventData$modality=="'d",]
nrow(temp)
temp
nrow(temp)
temp = instanceEventData[complete.cases(instanceEventData[,7]),]
temp
eidSentence("d139e50",docs)
eidSentence("d1e21",docs)
summary(instanceEventData$modality)
eidSentence("d5e246",docs)
valueSearch("d5e246",docs)
valueSearch("d70e30",docs)
eidSentenceXML("d70e30",docs)
eidSentenceXML("d70e66",docs)
valueSearch("d70e66",docs)
eidSentence("d70e66",docs)
xtabs(~ cardinality + pos, data=instanceEventData)
xtabs(~ cardinality + pos, data=instanceEventData)
quit()
source('main.R')
length(untilLinks)
untillinkIDList = extractIDfromAll(untilLinks,"lid")
untillinkIDList
linkListHostCompReport(untillinkIDList,untilData)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,signalID == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(SIDtoSignal(uniqueLinkIDs[[i]], docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
untillinkIDList
summary(untilData)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,lid == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(SIDtoSignal(uniqueLinkIDs[[i]], docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,lid == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(LIDtoLink(uniqueLinkIDs[[i]], docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
LIDtoLink("d4l11",docs)
linkListHostCompReport = function(uniqueLinkIDs,data){
for(i in 1:length(uniqueLinkIDs)){
print("")
print(i)
foo = subset(data,lid == uniqueLinkIDs[[i]])
if(is.na(foo$timeID)){
print(paste(foo$tense.e_host[[1]], foo$aspect.e_host[[1]], foo$polarity.e_host[[1]], foo$pos.e_host[[1]], foo$modality.e_host[[1]], foo$class.e_host[[1]], foo$word_form.e_host[[1]]), sep = " ")
} else {
print(paste(foo$type.t_host[[1]], foo$value.t_host[[1]], foo$temporalFunction.t_host[[1]], foo$functionInDocument.t_host[[1]], foo$word_form.t_host[[1]], sep = " "))
}
if(is.na(foo$relatedToTime)){
print(paste(foo$tense.e_comp[[1]],foo$aspect.e_comp[[1]], foo$polarity.e_comp[[1]], foo$pos.e_comp[[1]], foo$modality.e_comp[[1]], foo$class.e_comp[[1]], foo$word_form.e_comp[[1]], sep=" "))
} else {
print(paste(foo$type.t_comp[[1]], foo$value.t_comp[[1]], foo$temporalFunction.t_comp[[1]], foo$functionInDocument.t_comp[[1]], foo$word_form.t_comp[[1]], sep = " "))
}
print(printSentence(ToSentence(SIDtoSignal(foo$signalID, docs))))
}
}
linkListHostCompReport(untillinkIDList,untilData)
source('link.report.R')
linkListHostCompReport(untillinkIDList,untilData)
head(untilData)
TIDtoTime("d4t36",docs)
ToSentence(TIDtoTime("d4t36",docs))
ToSentence(TIDtoTime("d106t122",docs))
ToSentence(TIDtoTime("d121t196",docs))
test = subset(untilData,is.na(timeID))
nrow(test)
nrow(untilData)
test2 = dplyr::setdiff(untilData,test)
test2
ToSentence(TIDtoTime("d68t27",docs))
printSentenceCite(ToSentence(TIDtoTime("d68t27",docs)))
printSentenceCite(ToSentence(TIDtoTime("d118t299",docs)))
printSentenceCite(ToSentence(TIDtoTime("d118t299",docs)))
summary(untilData)
untilData$word_form.t_host
untilData$word_form.t_comp
sinceData$word_form.t_comp
untilData
savehistory(file="timebank.session.6.17.18.Rhistory")
exit
quit()
source('main.R')
beforeTimeIDs = as.matrix(na.omit(beforeData$relatedToTime))
beforeTimeIDs
beforeTimeIDs = as.vector(na.omit(beforeData$relatedToTime))
beforeTimeIDs
beforeTimeIDs[1]
beforeTimeIDs[2]
beforeTimeIDs[3]
beforeTimeIDs[4]
getValueListFromDataFrameColumn(beforeData$relatedToTime)
table(beforeData$relatedToTime)
test = (getValueListFromDataFrameColumn(beforeData$relatedToTime))
test
test = set(getValueListFromDataFrameColumn(beforeData$relatedToTime))
subset(timeData,tid=="d199t338")
subset(timeData,tid=="d119t338")
test = as.set(getValueListFromDataFrameColumn(beforeData$relatedToTime))
set(c(1,2,3))
subset(timeData,is.element(tid,test))
timeData
head(timeData)
beforeData = merge(beforeData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
afterLinks = getLinkSubset(tlinkWithSignals, "after")
afterData = makeDataFrame(afterLinks)
afterData = merge(afterData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp")) 
afterData = merge(afterData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
afterData = merge(afterData,timeData,by.x="timeID",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
afterData = merge(afterData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
sinceLinks = getLinkSubset(tlinkWithSignals, "since")
length(sinceLinks)
sinceThenLinks = getLinkSubset(tlinkWithSignals, "since then")
sinceLinks[length(sinceLinks)+1] = sinceThenLinks[1]
sinceData = makeDataFrame(sinceLinks)
# Removes tlink corresponding to misapplied since signal
removeNodes(getNodeSet(docs,"//TLINK[@lid='d166l4']"))
# Removes tlink corresponding to until signal conjoined verb in host, strangle
removeNodes(getNodeSet(docs,"//TLINK[@lid='d6l79']"))
# Removes tlink corresponding to until signal conjoined verb in complement, maintained
removeNodes(getNodeSet(docs,"//TLINK[@lid='d54l6']"))
tlinks = getNodeSet(docs,"//TLINK")
tlinkWithSignals = getNodeSet(docs,"//TLINK[@signalID]") # tlinks with the signalID attribute
cardinality = getNodeSet(docs,"//MAKEINSTANCE[@cardinality]")
plurals = getNodeSet(docs,"//MAKEINSTANCE[@cardinality='PLURAL']")
modality = getNodeSet(docs,"//MAKEINSTANCE[@modality]")
tlinkData = makeDataFrame(tlinks)
beforeLinks = getLinkSubset(tlinkWithSignals, "before")
beforeData = makeDataFrame(beforeLinks)
beforeData = cbind.fill(beforeData,timeVector)
beforeData = as.data.frame(beforeData)
beforeData = merge(beforeData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
beforeData = merge(beforeData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
head(timeData)
beforeData = merge(beforeData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
temp = valueSearch("d68l6",docs)
removeAttributes(temp[[1]])
xmlAttrs(temp[[1]]) <- c(lid="d68l6", relType="ENDED_BY", eventInstanceID="d68ei122", relatedToTime="d68t27", signalID="d68s26", origin="USER") 
temp = valueSearch("d118l33",docs)
removeAttributes(temp[[1]])
xmlAttrs(temp[[1]]) <- c(lid="d118l33", relType="ENDED_BY", eventInstanceID="d118ei2613", relatedToTime="d118t299", signalID="d118s296")
tlinks = getNodeSet(docs,"//TLINK")
tlinkWithSignals = getNodeSet(docs,"//TLINK[@signalID]") # tlinks with the signalID attribute
tlinkData = makeDataFrame(tlinks)
beforeLinks = getLinkSubset(tlinkWithSignals, "before")
beforeData = makeDataFrame(beforeLinks)
beforeData = cbind.fill(beforeData,timeVector)
beforeData = as.data.frame(beforeData)
beforeData = merge(beforeData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
beforeData = merge(beforeData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
beforeData = merge(beforeData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
afterLinks = getLinkSubset(tlinkWithSignals, "after")
afterData = makeDataFrame(afterLinks)
afterData = merge(afterData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp")) 
afterData = merge(afterData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
afterData = merge(afterData,timeData,by.x="timeID",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
afterData = merge(afterData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
sinceLinks = getLinkSubset(tlinkWithSignals, "since")
sinceThenLinks = getLinkSubset(tlinkWithSignals, "since then")
length(sinceLinks)
sinceLinks[length(sinceLinks)+1] = sinceThenLinks[1]
sinceData = makeDataFrame(sinceLinks)
sinceData = cbind.fill(sinceData,timeVector)
sinceData = merge(sinceData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
sinceData = merge(sinceData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
sinceData = merge(sinceData,timeData,by.x="timeID",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
sinceData = merge(sinceData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
untilLinks = getLinkSubset(tlinkWithSignals, "until")
untilData = makeDataFrame(untilLinks)
# a <- subset(untilData, eventInstanceID=="d6ei1660" & relatedToEventInstance=="d6ei1661")
# b <- subset(untilData, eventInstanceID=="d54ei1994" & relatedToEventInstance=="d54ei2000")
# untilData <- dplyr::setdiff(untilData,a)
# untilData <- dplyr::setdiff(untilData,b)
untilData = merge(untilData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
untilData = merge(untilData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
untilData = merge(untilData,timeData,by.x="timeID",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
untilData = merge(untilData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
head(timeData)
colnames(untilData)
rm(timeVector)
################# This last bit is needed to count the sentences inside these two "Lede paragraph" tags ##########
LPs = getNodeSet(docs,"//LP")
parentNode = xmlParent(LPs[[1]])
replacement = parseXMLAndAdd("<LP> WASHINGTON -- <s>Iraq's Saddam Hussein, his options for <EVENT eid='d47e400' class='ASPECTUAL' word_form='ending'>ending</EVENT> the Persian Gulf <EVENT eid='d47e399' class='STATE' word_form='crisis'>crisis</EVENT> growing increasingly unpleasant, <EVENT eid='d47e401' class='I_STATE' word_form='assumed'>assumed</EVENT> the <EVENT eid='d47e462' class='STATE' word_form='role'>role</EVENT> of embattled Arab hero in <EVENT eid='d47e403' class='I_ACTION' word_form='offering'>offering</EVENT> his first rough <EVENT eid='d47e404' class='OCCURRENCE' word_form='proposal'>proposal</EVENT> for a negotiated <EVENT eid='d47e405' class='ASPECTUAL' word_form='end'>end</EVENT> to the <EVENT eid='d47e406' class='STATE' word_form='confrontation'>confrontation</EVENT>.</s> <s>The Iraqi leader, in an '<EVENT eid='d47e407' class='OCCURRENCE' word_form='initiative'>initiative</EVENT>' <EVENT eid='d47e408' class='OCCURRENCE' word_form='designed'>designed</EVENT> as much to <EVENT eid='d47e411' class='I_ACTION' word_form='rally'>rally</EVENT> Arab public <EVENT eid='d47e412' class='STATE' word_form='opinion'>opinion</EVENT> as to <EVENT eid='d47e413' class='I_ACTION' word_form='launch'>launch</EVENT> meaningful <EVENT eid='d47e414' class='STATE' word_form='negotiations'>negotiations</EVENT>, <EVENT eid='d47e415' class='REPORTING' word_form='announced'>announced</EVENT> <TIMEX3 tid='d47t416' type='DATE' value='1990-08-12' temporalFunction='true' functionInDocument='NONE' anchorTimeID='d47t397' word_form='yesterday'>yesterday</TIMEX3> that he will <EVENT eid='d47e417' class='OCCURRENCE' word_form='withdraw'>withdraw</EVENT> his troops from Kuwait only if Israel <EVENT eid='d47e418' class='OCCURRENCE' word_form='withdraws'>withdraws</EVENT> from the West Bank and Syria from Lebanon.</s> <s>He apparently <EVENT eid='d47e419' class='I_STATE' word_form='hopes'>hopes</EVENT> to <EVENT eid='d47e421' class='OCCURRENCE' word_form='lure'>lure</EVENT> <EVENT eid='d47e422' class='OCCURRENCE' word_form='support'>support</EVENT> from Arabs who have <EVENT eid='d47e423' class='OCCURRENCE' word_form='spurned'>spurned</EVENT> him so far by <EVENT eid='d47e424' class='I_ACTION' word_form='suggesting'>suggesting</EVENT> that Iraq will <EVENT eid='d47e425' class='OCCURRENCE' word_form='use'>use</EVENT> its <EVENT eid='d47e426' class='STATE' word_form='occupation'>occupation</EVENT> of Kuwait as a lever to <EVENT eid='d47e427' class='OCCURRENCE' word_form='solve'>solve</EVENT> the Arab world's most frustrating <EVENT eid='d47e428' class='STATE' word_form='problem'>problem</EVENT>, the 23-year Israeli <EVENT eid='d47e429' class='STATE' word_form='occupation'>occupation</EVENT> of land <EVENT eid='d47e430' class='OCCURRENCE' word_form='claimed'>claimed</EVENT> by Palestinians.</s> </LP>")
replaceNodes(parentNode[[9]],replacement[[1]],free=TRUE) #<LP> is the 8th child of its parent
parentNode = xmlParent(LPs[[2]])
replacement = parseXMLAndAdd("<LP> WASHINGTON -- <s>With the ground <EVENT eid='d48e433' class='OCCURRENCE' word_form='battle'>battle</EVENT> to <EVENT eid='d48e435' class='OCCURRENCE' word_form='liberate'>liberate</EVENT> Kuwait <EVENT eid='d48e436' class='ASPECTUAL' word_form='proceeding'>proceeding</EVENT> with surprising speed and success, Bush administration officials are optimistic the Persian Gulf <EVENT eid='d48e438' class='OCCURRENCE' word_form='war'>war</EVENT> can <EVENT eid='d48e439' class='ASPECTUAL' word_form='begin'>begin</EVENT> <EVENT eid='d48e441' class='OCCURRENCE' word_form='winding'>winding</EVENT> down in a matter of days.</s> <s>The enormous ground <EVENT eid='d48e524' class='OCCURRENCE' word_form='offensive'>offensive</EVENT> by U.S. Marines and Army troops, at least during its first 24 hours, <EVENT eid='d48e442' class='OCCURRENCE' word_form='met'>met</EVENT> only sporadic Iraqi <EVENT eid='d48e443' class='OCCURRENCE' word_form='resistance'>resistance</EVENT> as it quickly <EVENT eid='d48e444' class='OCCURRENCE' word_form='penetrated'>penetrated</EVENT> deep into Kuwait and parts of Iraq, military officials <EVENT eid='d48e446' class='REPORTING' word_form='said'>said</EVENT>.</s> <s>According to press pool <EVENT eid='d48e447' class='REPORTING' word_form='reports'>reports</EVENT>, U.S. Marines are already <EVENT eid='d48e534' class='STATE' word_form='on'>on</EVENT> the outskirts of Kuwait City.</s> </LP>")
replaceNodes(parentNode[[8]],replacement[[1]])
LEADPARA = getNodeSet(docs,"//LEADPARA")
parentNode = xmlParent(LEADPARA[[1]])
replacement = parseXMLAndAdd("<LEADPARA> <s> One of President Bush's sons has <EVENT eid='e64' class='REPORTING'>informed</EVENT> White House Chief of Staff John Sununu that he has <EVENT eid='e65' class='OCCURRENCE'>lost</EVENT> much of his support among Republicans, <EVENT eid='e68' class='OCCURRENCE'>prompting</EVENT> an intense effort by Sununu to <EVENT eid='e83' class='STATE'>hold</EVENT> on to his job by <EVENT eid='e84' class='OCCURRENCE'>demonstrating</EVENT> his GOP backing, White House and Republican sources <EVENT eid='e69' class='REPORTING'>said</EVENT> <TIMEX3 tid='t70' type='DATE' value='1991-12-02' temporalFunction='true' functionInDocument='NONE' anchorTimeID='t66'>Monday</TIMEX3>. </s> <s> Sununu was <EVENT eid='e85' class='REPORTING'>told</EVENT> <TIMEX3 tid='t73' type='DATE' value='1991-11-27' temporalFunction='true' functionInDocument='NONE' anchorTimeID='t66'>Wednesday</TIMEX3> by Bush's son, George, that he had <EVENT eid='e75' class='OCCURRENCE'>alienated</EVENT> members of the Cabinet, the White House staff and the Republican political community, <EVENT eid='e76' class='OCCURRENCE'>creating</EVENT> a situation that puts his effectiveness in significant doubt, the sources <EVENT eid='e77' class='REPORTING'>said</EVENT>. </s> </LEADPARA>")
replaceNodes(parentNode[[5]],replacement[[1]])
rm(LPs,LEADPARA,parentNode,replacement)
sentences = getNodeSet(docs,"//s") # getNodeSet is from the xml library
xtabs(~ pos.e_host + pos.e_comp, data=sinceData)
nrow(sinceData)
xtabs(~ pos.e_host + type.t_comp, data=sinceData)
xtabs(~ pos.e_host + type.t_comp, data=sinceData)
xtabs(~ pos.e_host + pos.e_comp, data=untilData)
xtabs(~ pos.e_host + type.t_comp, data=untilData)
head(untilData)
untilData = makeDataFrame(untilLinks)
untilData = cbind.fill(untilData,timeVector)
timeVector = matrix(dimnames=list("","timeID")) # to make before data frame comparable to after
untilData = cbind.fill(untilData,timeVector)
untilData = merge(untilData,instanceEventData,by.x="eventInstanceID",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
untilData = merge(untilData,instanceEventData,by.x="relatedToEventInstance",by.y="eiid",all.x=TRUE,suffixes = c(".e_host",".e_comp"))
untilData = merge(untilData,timeData,by.x="timeID",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
untilData = merge(untilData,timeData,by.x="relatedToTime",by.y="tid",all.x=TRUE,suffixes = c(".t_host",".t_comp"))
rm(timeVector)
xtabs(~ pos.e_host + type.t_comp, data=untilData)
xtabs(~ tense.e_host + tense.e_comp, data=sinceData)
head(sinceData)
summary(sinceData)
sinceData$word_form.t_comp
xtabs(~ tense.e_host + aspect.e_host + tense.e_comp + aspect.e_comp, data=sinceData)
sinceLinkIDList = extractIDfromAll(sinceLinks,"lid")
linkListHostCompReport(sinceLinkIDList,sinceData)
xtabs(~ pos.e_host + pos.e_comp, data=sinceData)
xtabs(~ pos.e_host + type.t_comp, data=sinceData)
xtabs(~ class.e_host + class.e_comp, data=sinceData)
xtabs(~ class.e_host + type.t_comp, data=sinceData)
xtabs(~ class.e_host + class.e_comp + pos.e_host + pos.e_comp, data=sinceData)
xtabs(~ class.e_host + pos.e_host + type.t_comp, data=sinceData)
sinceThenLinks
valueSearch("d146ei2321",docs)
valueSearch("d146e185",docs)
valueSearch("d146e185",docs)[[1]]
ToSentence(valueSearch("d146e185",docs)[[1]])
linkListHostCompReport(
c("d146l76"),sinceData)
untilLinkIDList = extractIDfromAll(untilLinks,"lid")
linkListHostCompReport(untilLinkIDList,untilData)
quit()
source('main.R')
summary(beforeData)
summary(afterData)
afterData$signalID
table(afterData$signalID)
sort(table(afterData$signalID))
valueSearch("d119s206",docs)
valueSearch("d159s154",docs)
valueSearch("d115s48",docs)
valueSearch("d145s91",docs)
valueSearch("d28s252",docs)
valueSearch("d119s337",docs)
valueSearch("d151s19     ",docs)
valueSearch("d151s19",docs)
valueSearch("d4s66",docs)
valueSearch("d8s58",docs)
valueSearch("d17s3",docs)
valueSearch("d118s325",docs)
valueSearch("d119ei2073",docs)
valueSearch("d119e208",docs)
valueSearch("d119e208",docs)[[1]]
printSentenceCite(ToSentence(valueSearch("d119e208",docs)[[1]]))
valueSearch("d119ei2072",docs)
valueSearch("d119e205",docs)
valueSearch("d119t338",docs)
valueSearch("d159s154",docs)
printSentenceCite(ToSentence(valueSearch("d159s154",docs)[[1]]))
valueSearch("d159ei2019",docs)
valueSearch("d159ei2020",docs)
valueSearch("d159t151",docs)
valueSearch("d159e40",docs)
valueSearch("d159e42",docs)
printSentenceCite(ToSentence(valueSearch("d115s48",docs)[[1]]))
valueSearch("d115ei459",docs)
valueSearch("d115ei460",docs)
valueSearch("d115ei461",docs)
valueSearch("d115e47",docs)
valueSearch("d115e49",docs)
valueSearch("d115e50",docs)
printSentenceCite(ToSentence(valueSearch("d145s91",docs)[[1]]))
valueSearch("d145ei2026",docs)
valueSearch("d145ei2027",docs)
valueSearch("d145ei2028",docs)
valueSearch("d145e88",docs)
valueSearch("d145e89",docs)
valueSearch("d145e90",docs)
printSentenceCite(ToSentence(valueSearch("d28s252",docs)[[1]]))
valueSearch("d28ei2242",docs)
valueSearch("d28ei2243",docs)
valueSearch("d28ei2240",docs)
valueSearch("d28e95",docs)
valueSearch("d28e96",docs)
valueSearch("d28e251",docs)
printSentenceCite(ToSentence(valueSearch("d119s337",docs)[[1]]))
printSentenceCite(ToSentence(valueSearch("d119ei2073",docs)[[1]]))
valueSearch("d119ei2073",docs)
valueSearch("d119t335",docs)
valueSearch("d119e208",docs)
printSentenceCite(ToSentence(valueSearch("d151s19",docs)[[1]]))
valueSearch("d151ei127",docs)
valueSearch("d151ei128",docs)
valueSearch("d151ei129",docs)
valueSearch("d151e24",docs)
valueSearch("d151e18",docs)
valueSearch("d151e20",docs)
printSentenceCite(ToSentence(valueSearch("d4s66",docs)[[1]]))
valueSearch("d4ei265",docs)
valueSearch("d4ei266",docs)
valueSearch("d4t34",docs)
valueSearch("d4e6",docs)
valueSearch("d4e7",docs)
printSentenceCite(ToSentence(valueSearch("d8s58",docs)[[1]]))
valueSearch("d8ei325",docs)
valueSearch("d8ei326",docs)
valueSearch("d8t44",docs)
valueSearch("d8e28",docs)
valueSearch("d8e5",docs)
printSentenceCite(ToSentence(valueSearch("d17s3",docs)[[1]]))
valueSearch("d17ei1233",docs)
valueSearch("d17ei1235",docs)
valueSearch("d17t139",docs)
valueSearch("d17e1",docs)
xtabs( ~ class.e_host + polarity.e_host, data=untilData)
 subset(untilData,polarity=="negative")
 subset(untilData,polarity.e_host=="negative")
 subset(untilData,polarity.e_host=="NEG")
valueSearch("d17e4",docs)
printSentenceCite(ToSentence(valueSearch("d118s325",docs)[[1]]))
valueSearch("d118ei2659",docs)
valueSearch("d118ei2657",docs)
valueSearch("d118t326",docs)
valueSearch("d118e327",docs)
valueSearch("d118e147",docs)
summary(untilData)
options(width=160)
summary(untilData)
options(width=180)
summary(untilData)
options(width=200)
summary(untilData)
options(width=1000)
summary(untilData)
options(width=800)
summary(untilData)
options(width=700)
summary(untilData)
options(width=600)
summary(untilData)
options(width=300)
summary(untilData)
options(width=250)
summary(untilData)
options(width=200)
summary(untilData)
quit()
library("devtools")
devtools::install_github("klutometis/roxygen")
update.packages(checkBuilt=TRUE, ask=FALSE)
devtools::install_github("klutometis/roxygen")
library(roxygen2)
quit()
